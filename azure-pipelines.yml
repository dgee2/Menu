# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  testOutputDirectory: '$(Agent.TempDirectory)/testresults'

steps:
- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud (PR)'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'dgee2-github'
    scannerMode: 'MSBuild'
    projectKey: 'dgee2_Menu'
    projectName: 'Menu'
    extraProperties: |
      sonar.exclusions=**/obj/**,**/*.dll
      sonar.cs.vstest.reportsPaths=$(TestOutputDirectory)/*.trx
      sonar.coverageReportPaths=$(TestOutputDirectory)/CodeCoverage/SonarQube.xml
      sonar.coverage.exclusions=**/*Test*/**/*
  condition: eq(variables['Build.Reason'], 'PullRequest')
- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'dgee2-github'
    scannerMode: 'MSBuild'
    projectKey: 'dgee2_Menu'
    projectName: 'Menu'
    extraProperties: |
      sonar.exclusions=**/obj/**,**/*.dll
      sonar.branch.name=$(Build.SourceBranchName)
      sonar.cs.vstest.reportsPaths=$(TestOutputDirectory)/*.trx
      sonar.coverageReportPaths=$(TestOutputDirectory)/CodeCoverage/SonarQube.xml
      sonar.coverage.exclusions=**/*Test*/**/*
  condition: ne(variables['Build.Reason'], 'PullRequest')
- task: DotNetCoreCLI@2
  displayName: 'DotNet Restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    verbosityRestore: 'Normal'
- task: DotNetCoreCLI@2
  displayName: 'DotNet Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore --nologo'
    modifyOutputPath: true
- task: DotNetCoreCLI@2
  displayName: 'DotNet Test'
  inputs:
    command: 'test'
    projects: |
      **/*.test.csproj
      **/*.tests.csproj
      !**/*.integration.test.csproj
      !**/*.integration.tests.csproj
    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --collect "XPlat Code Coverage" --logger trx --results-directory $(TestOutputDirectory)'
    publishTestResults: false
- task: reportgenerator@4
  inputs:
    reports: '$(TestOutputDirectory)/*/coverage.cobertura.xml'
    targetdir: '$(TestOutputDirectory)/CodeCoverage'
    reporttypes: 'Cobertura;SonarQube'
    assemblyfilters: '-*Tests*'
    filefilters: '-*/Migrations/*.cs'
  condition: succeededOrFailed()
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(TestOutputDirectory)/CodeCoverage/Cobertura.xml'
    failIfCoverageEmpty: true
  condition: succeededOrFailed()
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(TestOutputDirectory)/*.trx'
    failTaskOnFailedTests: true
    buildConfiguration: '$(BuildConfiguration)'
  condition: succeededOrFailed()
- task: VSBuild@1
  inputs:
    solution: '**\*.sqlproj'
    configuration: '$(buildConfiguration)'
    clean: true
    maximumCpuCount: true
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Pipeline.Workspace)'
#     ArtifactName: 'drop'
#     publishLocation: 'Container'
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Agent.TempDirectory)'
#     ArtifactName: 'temp'
#     publishLocation: 'Container'
- task: SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'
  continueOnError: false
  condition: succeededOrFailed()
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish Quality Gate Result'
  continueOnError: false
  condition: succeededOrFailed()