# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-2022'

stages:
  - stage: Build
    jobs:
      - job:
        displayName: API Build
        variables:
          buildConfiguration: 'Release'
          testOutputDirectory: '$(Agent.TempDirectory)/testresults'
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
        steps:
        - task: Cache@2
          inputs:
            key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/**/*.csproj'
            restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
            path: $(NUGET_PACKAGES)
          displayName: Cache NuGet packages
        - task: DotNetCoreCLI@2
          displayName: 'DotNet Restore'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'
            verbosityRestore: 'Normal'
        - task: DotNetCoreCLI@2
          displayName: 'DotNet Build'
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: '--configuration $(buildConfiguration) --no-restore --nologo'
            modifyOutputPath: true
        - task: DotNetCoreCLI@2
          displayName: 'DotNet Test'
          inputs:
            command: 'test'
            projects: |
              **/*.test.csproj
              **/*.tests.csproj
              !**/*.integration.test.csproj
              !**/*.integration.tests.csproj
            arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --collect "XPlat Code Coverage" --logger trx --results-directory $(TestOutputDirectory)'
            publishTestResults: false
        - task: reportgenerator@4
          inputs:
            reports: '$(TestOutputDirectory)/*/coverage.cobertura.xml'
            targetdir: '$(TestOutputDirectory)/CodeCoverage'
            reporttypes: 'Cobertura;SonarQube'
            assemblyfilters: '-*Tests*'
            filefilters: '-*/Migrations/*.cs'
          condition: succeededOrFailed()
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage report'
          inputs:
            codeCoverageTool: 'cobertura'
            summaryFileLocation: '$(TestOutputDirectory)/CodeCoverage/Cobertura.xml'
            failIfCoverageEmpty: true
          condition: succeededOrFailed()
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: '$(TestOutputDirectory)/*.trx'
            failTaskOnFailedTests: true
            buildConfiguration: '$(BuildConfiguration)'
          condition: succeededOrFailed()
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/MenuApi/bin/Release/net7.0'
            ArtifactName: 'MenuAPI'
            publishLocation: 'Container'
        # - task: VSBuild@1
        #   inputs:
        #     solution: '**\*.sqlproj'
        #     configuration: '$(buildConfiguration)'
        #     clean: true
        #     maximumCpuCount: true
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Pipeline.Workspace)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Agent.TempDirectory)'
            ArtifactName: 'temp'
            publishLocation: 'Container'

      - job:
        displayName: Build Vue Component
        variables:
          componentDirectory: '$(Build.SourcesDirectory)/MenuUI'
        steps:
        - task: CmdLine@2
          displayName: 'yarn install'
          inputs:
            script: 'yarn'
            workingDirectory: '$(componentDirectory)'
        - task: CmdLine@2
          displayName: 'yarn build'
          inputs:
            script: 'yarn run build'
            workingDirectory: '$(componentDirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(componentDirectory)/dist'
            ArtifactName: 'UIBuild'
            publishLocation: 'Container'