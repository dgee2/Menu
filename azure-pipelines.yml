# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreInstaller@0
  displayName: Install .NET Core SDK
  name: install_dotnetcore_sdk
  enabled: true
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud (PR)'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'dgee2-github'
    scannerMode: 'MSBuild'
    projectKey: 'dgee2_Menu'
    projectName: 'Menu'
    extraProperties: |
      sonar.exclusions=**/obj/**,**/*.dll
  condition: eq(variables['Build.Reason'], 'PullRequest')
- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'dgee2-github'
    scannerMode: 'MSBuild'
    projectKey: 'dgee2_Menu'
    projectName: 'Menu'
    extraProperties: |
      sonar.exclusions=**/obj/**,**/*.dll
      sonar.branch.name=$(Build.SourceBranchName)
      sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
      sonar.coverageReportPaths=$(Agent.TempDirectory)/CodeCoverage/SonarQube.xml
      sonar.coverage.exclusions=**/*Test*/**/*
  condition: ne(variables['Build.Reason'], 'PullRequest')
- task: DotNetCoreCLI@2
  displayName: 'DotNet Restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    verbosityRestore: 'Normal'
- task: DotNetCoreCLI@2
  displayName: 'DotNet Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore --nologo'
    modifyOutputPath: true
- task: DotNetCoreCLI@2
  displayName: 'DotNet Test'
  inputs:
    command: 'test'
    projects: |
      **/*.test.csproj
      **/*.tests.csproj
    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --collect "XPlat Code Coverage"'
    modifyOutputPath: true
- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool'
- script: |
    reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura;SonarQube
  displayName: 'Create code coverage report'
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    failIfCoverageEmpty: true
- task: VSBuild@1
  inputs:
    solution: '**\*.sqlproj'
    configuration: '$(buildConfiguration)'
    clean: true
    maximumCpuCount: true
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Pipeline.Workspace)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  condition: always()
- task: SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'
  continueOnError: false
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish Quality Gate Result'
  continueOnError: false